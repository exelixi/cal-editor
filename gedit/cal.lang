<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Author: Endri Bezati <endri.bezati@gmail.com>
 Copyright (C) 2017 Endri Bezati <endri.bezati@gmail.com>
 

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="cal" _name="Cal" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-cal</property>
    <property name="globs">*.cal</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"                   map-to="def:comment"/>
    <style id="escaped-character" _name="Escaped Character"         map-to="def:special-char"/>
    <style id="string"            _name="String"                    map-to="def:string"/>
    <style id="char"              _name="Character"                 map-to="def:character"/>
    <!-- Translators: refered to some specific keywords of the language that
         allow to get external functionalities -->
    <style id="external"          _name="External"                  map-to="def:preprocessor"/>
    <style id="keyword"           _name="Keyword"                   map-to="def:keyword"/>
    <style id="boolean"           _name="Boolean value"             map-to="def:boolean"/>
    <style id="number"            _name="Number"                    map-to="def:decimal"/>
    <style id="type"              _name="Data Type"                 map-to="def:type"/>
  </styles>

  <definitions>

    <define-regex id="escaped-character" extended="true">
      \\(               # leading backslash
      [\\\"\'nrbtf] |   # escaped character
      [0-9]{1,3}    |   # latin encoded char
      u[0-9]{1,4}       # unicode char
      )
    </define-regex>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
      </include>
    </context>

   <context id="char" style-ref="char">
     <match>'(\%{escaped-character}|.)'</match>
   </context>

    <context id="externals" style-ref="external">
      <keyword>import</keyword>
      <keyword>package</keyword>
    </context>

    
    <context id="primitive-types" style-ref="type">
      <keyword>bool</keyword>
      <keyword>uint</keyword>
      <keyword>int</keyword>
      <keyword>double</keyword>
      <keyword>float</keyword>
      <keyword>List</keyword>
      <keyword>map</keyword>
    </context>

    <context id="flow" style-ref="keyword">
      <keyword>action</keyword>
      <keyword>actor</keyword>
      <keyword>begin</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>entity</keyword>
      <keyword>entities</keyword>
      <keyword>end</keyword>
      <keyword>external</keyword>
      <keyword>for</keyword>
      <keyword>foreach</keyword>
      <keyword>function</keyword>
      <keyword>fsm</keyword>
      <keyword>if</keyword>
      <keyword>initialize</keyword>
      <keyword>namespace</keyword>
      <keyword>network</keyword>
      <keyword>procedure</keyword>
      <keyword>repeat</keyword>
      <keyword>size</keyword>
      <keyword>structure</keyword>
      <keyword>while</keyword>
    </context>
    
    <context id="boolean" style-ref="boolean">
      <keyword>false</keyword>
      <keyword>true</keyword>
    </context>

    <context id="numeric" style-ref="number">
      <match extended="true">
        (\b([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?\b|
         \b(([0-9]+[Ee][-]?[0-9]+|
            ([0-9]*\.[0-9]+|[0-9]+\.)([Ee][-]?[0-9]+)?)[fFdD]?|
            [0-9]+[FfDd]))
      </match>
    </context>

    <context id="cal" class="no-spell-check">
      <include>
        <context ref="def:c-like-comment" style-ref="comment"/>
        <context ref="def:c-like-comment-multiline" style-ref="comment"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="externals"/>
        <context ref="primitive-types"/>
        <context ref="flow"/>
        <context ref="boolean"/>
        <context ref="numeric"/>
      </include>
    </context>

  </definitions>
</language>
